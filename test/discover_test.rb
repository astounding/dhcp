#!/usr/bin/env ruby
# encoding: ASCII-8BIT

require_relative 'test_helper'

class TestDHCPPacket < Test::Unit::TestCase

  def test_dhcp_packet
    ## UDP DHCP Discover packet payloads (the data portion of the UDP packet) captured in Wireshark:
    @discover_packets = [
      [
        "0101060000003d1d0000000000000000000000000000000000000000000b8201" +
        "fc42000000000000000000000000000000000000000000000000000000000000" +
        "0000000000000000000000000000000000000000000000000000000000000000" +
        "0000000000000000000000000000000000000000000000000000000000000000" +
        "0000000000000000000000000000000000000000000000000000000000000000" +
        "0000000000000000000000000000000000000000000000000000000000000000" +
        "0000000000000000000000000000000000000000000000000000000000000000" +
        "000000000000000000000000638253633501013d0701000b8201fc4232040000" +
        "000037040103062aff00000000000000"
      ].pack('H*'),
      [
        "0101060000003d1d0000000000000000000000000000000000000000000b8201" +
        "fc42000000000000000000000000000000000000000000000000000000000000" +
        "0000000000000000000000000000000000000000000000000000000000000000" +
        "0000000000000000000000000000000000000000000000000000000000000000" +
        "0000000000000000000000000000000000000000000000000000000000000000" +
        "0000000000000000000000000000000000000000000000000000000000000000" +
        "0000000000000000000000000000000000000000000000000000000000000000" +
        "000000000000000000000000638253633501013d0701000b8201fc4232040000" +
        "000037040103062aff00000000000000"
      ].pack('H*')
    ].each do |raw_packet|
      assert_equal(DHCP::Packet.new(raw_packet).class, DHCP::Packet)
    end
    assert_equal(DHCP::Packet.new.class, DHCP::Packet)
  end

end

#<DHCP::Packet:0x000008023cf230 @op=1, @htype_name=:htype_10mb_ethernet, @htype=1, @hlen=6, @hops=0, @xid=15645, @secs=0, @flags=0, @ciaddr="\x00\x00\x00\x00", @yiaddr="\x00\x00\x00\x00", @siaddr="\x00\x00\x00\x00", @giaddr="\x00\x00\x00\x00", @chaddr="\x00\v\x82\x01\xFCB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", @sname="\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", @file="\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", @options="5\x01\x01=\a\x01\x00\v\x82\x01\xFCB2\x04\x00\x00\x00\x007\x04\x01\x03\x06*\xFF\x00\x00\x00\x00\x00\x00\x00", @optlist=[#<DHCP::OptInt8:0x000008023cc990 @opt=53, @name=:dhcp_message_type, @data="\x01">, #<DHCP::OptHexString:0x000008023cbd38 @opt=61, @name=:client_identifier, @data="\x01\x00\v\x82\x01\xFCB">, #<DHCP::OptIP:0x000008023cb4c8 @opt=50, @name=:requested_ip_address, @data="\x00\x00\x00\x00">, #<DHCP::OptInt8List:0x000008023ca2d0 @opt=55, @name=:parameter_request_list, @data="\x01\x03\x06*", @size=4>, #<DHCP::Opt:0x000008023c88e0 @opt=255, @name=:end>], @type=1, @type_name="DHCPDISCOVER">


#p pk
#puts
#pk = DHCP::Packet.new(
#  :type => DHCP::DHCPOFFER
#)
#p pk
##p pk.to_packet
